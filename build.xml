<?xml version="1.0"?>
<!--
 Copyright 2005-2006 The Kuali Foundation

 Licensed under the Educational Community License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.opensource.org/licenses/ecl2.php

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<project name="kfs" default="help" basedir="."
	xmlns:rsel="antlib:org.apache.tools.ant.types.resources.selectors"
    xmlns:rcmp="antlib:org.apache.tools.ant.types.resources.comparators">
	<!-- run the help target to view usage instructions for public targets -->

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
	        <fileset dir="build">
	            <include name="ant-contrib*.jar" />
	            <include name="bcel*.jar" />
	        </fileset>
		</classpath>
	</taskdef>
	
	<taskdef resource="org/codehaus/groovy/antlib.xml">
		<classpath>
	        <fileset dir="build">
	            <include name="groovy*.jar" />
	        </fileset>
		</classpath>
	</taskdef>

    <property name="cobertura.dir" location="test/lib" />
    
    <path id="cobertura.classpath">
        <fileset dir="${cobertura.dir}">
            <include name="*.jar" />
        </fileset>
        <fileset dir="build">
            <include name="log4j*.jar" />
        </fileset>
    </path>
    
    <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

	<target name="check-rice-lib">
		<if>
			<not>
				<available file="build/rice-lib" type="dir" />
			</not>
			<then>
				<antcall target="extract-rice-libraries" />
				<antcall target="build-eclipse-classpath" />
			</then>
		</if>
	</target>
	
	<target name="dist-local" if="is.local.build" depends="clean,check-rice-lib,filter-project,filter-local,overlay-additional-web-content,overlay-additional-schema,filter-project-schema" description="Prepare local configuration files and tokenized resources and deploy tomcat context file on development workstation">
		<copy file="${metainf.directory}/${context.file}" tofile="${appserver.localhost.dir}/kfs-${build.environment}.xml" overwrite="true" />
	</target>
	
	<target name="test-local" depends="dist-local,make-tests,test" description="Run all unit tests and format results"/>
	
	<target name="filter-libraries" depends="init-properties,check-rice-lib">
		<!-- Copies over institutional lib libraries to the application's library directory -->
		<mkdir dir="${lib.directory}" />
				
		<copy todir="${lib.directory}" verbose="true">
			<fileset dir="${build.rice.lib.directory}">
			    <include name="*.jar"/>
			</fileset>
			<fileset dir="${build.kfs.lib.directory}">
			    <include name="*.jar"/>
			</fileset>
		</copy>
		<if>
			<isset property="institution.lib.directory" />
			<then>
				<copy todir="${lib.directory}" overwrite="true">
					<fileset dir="${institution.lib.directory}" includes="*.jar" />
				</copy>
			</then>
		</if>
	</target>

	<target name="echo-properties" depends="init-properties" description="Print all build properties that have been set">
		<echoproperties />
	</target>

	<target name="clean" depends="clean-project,clean-local" description="Remove all build output" />

	<target name="clean-all" depends="clean" description="Delete all generated/extracted files within the project.">
		<delete dir="${build.rice.lib.directory}" />
		<delete dir="build/rice-datadictionary" />
		<delete dir="work/web-root/META-INF" />
		<delete dir="test/classes" />
		<delete dir="build/temp" />
		<mkdir dir="build/temp"/>
		<delete dir="build/tomcat/work/Catalina" />
		<delete quiet="true">
			<fileset dir="work/web-root/WEB-INF/classes" includes="**/*" />
		</delete>
		<delete>
			<fileset dir="build/tomcat/lib">
				<include name="org.eclipse.*" />
				<include name="log4j*" />
			</fileset>
		</delete>
	</target>
	
	<target name="init-property-files">
		<if>
			<available file="${user.home.safe}/kfs-build.properties" />
			<then>
				<echo message="Reading Properties: ${user.home.safe}/kfs-build.properties" />
				<property file="${user.home.safe}/kfs-build.properties" />
			</then>
		</if>
		<if>
			<available file="${institution.build.properties.file}" />
			<then>
				<echo message="Reading Properties: ${institution.build.properties.file}" />
				<property file="${institution.build.properties.file}" />
			</then>
		</if>
    	<property name="build.environment" value="dev"/>
		<if>
			<available file="${basedir.safe}/${build.environment}-build.properties" />
			<then>
				<echo message="Reading Properties: ${basedir.safe}/${build.environment}-build.properties" />    	
		        <property file="${basedir.safe}/${build.environment}-build.properties" />
			</then>
		</if>
		<property name="properties.directory" location="build/properties" />
		<echo message="Reading Properties: ${properties.directory}/build.properties" />
		<property file="${properties.directory}/build.properties" />
		<echo message="Reading Properties: ${properties.directory}/database.properties" />
		<property file="${properties.directory}/database.properties" />
		<echo message="Reading Properties: ${properties.directory}/directory.properties" />
		<property file="${properties.directory}/directory.properties" />
		<echo message="Reading Properties: ${properties.directory}/logging.properties" />
		<property file="${properties.directory}/logging.properties" />
		<echo message="Reading Properties: ${properties.directory}/batch.properties" />
		<property file="${properties.directory}/batch.properties" />
		<echo message="Reading Properties: ${properties.directory}/email.properties" />
		<property file="${properties.directory}/email.properties" />
		<echo message="Reading Properties: ${properties.directory}/url.properties" />
		<property file="${properties.directory}/url.properties" />
		<echo message="Reading Properties: ${properties.directory}/rice.properties" />
		<property file="${properties.directory}/rice.properties" />
		<echo message="Reading Properties: ${properties.directory}/spring.properties" />
		<property file="${properties.directory}/spring.properties" />
		<echo message="Reading Properties: ${properties.directory}/web.properties" />
		<property file="${properties.directory}/web.properties" />
		<echo message="Reading Properties: ${properties.directory}/b2b.properties" />
		<property file="${properties.directory}/b2b.properties" />
	</target>
		
	<target name="init-properties" depends="init-core-properties,init-property-files,init-base-properties,init-database-properties,init-spring-properties,init-rice-properties,init-b2b-properties,init-other-properties,init-test-properties" />
	
	<target name="init-core-properties">
		<pathconvert property="basedir.safe" dirsep="/" pathsep=";">
			<path location="${basedir}" />
		</pathconvert>
		<pathconvert property="user.home.safe" dirsep="/" pathsep=";">
			<path location="${user.home}" />
		</pathconvert>
	</target>
	
	<target name="init-base-properties" depends="init-property-files">
		<tstamp><format property="build.version" pattern="'KFS ${kfs.version}' MM/dd/yyyy hh:mm aa" /></tstamp>
	  	<tstamp><format property="current.year" pattern="yyyy" locale="en,US" /></tstamp>

		<property name="fail.when.compile.fails" value="true"/>
		
		<condition property="context.docbase" value=' docBase="${basedir.safe}/${webroot.directory}"' else="">
			<isset property="is.local.build" />
		</condition>

		<condition property="appenders" value="INFO, LogFile, StdOut" else="INFO, LogFile"><isset property="is.local.build" /></condition>
		
		<condition property="use.quartz.jdbc.jobstore" value="false" else="true"><isset property="is.local.build" /></condition>

		<condition property="distributable.tag" value="&lt;distributable /&gt;" else="">
			<istrue value="${is.clustered}"/>
		</condition>
	</target>
	
	<target name="init-database-properties" depends="init-property-files">
		<condition property="datasource.url" value="${mysql.datasource.url}" else="${oracle.datasource.url}"><equals arg1="${datasource.ojb.platform}" arg2="${mysql.ojb.platform}" /></condition>
		<condition property="impex.db.type" value="mysql" else="oracle"><equals arg1="${datasource.ojb.platform}" arg2="${mysql.ojb.platform}" /></condition>
		<condition property="use.p6spy.local" value="true">
			<and>
			    <isset property="is.local.build" />
				<istrue value="${use.p6spy}" />
			</and>
		</condition>
		<!-- (all other uses presently commented out)
		<condition property="rice.standalone.flag" value="true">
			<istrue arg1="${rice.standalone}" />
		</condition>
		-->
		<condition property="datasource.driver.class" value="${p6spy.driver.class}"><isset property="use.p6spy.local" /></condition>
		<condition property="datasource.driver.class" value="${mysql.driver.class}" else="${oracle.driver.class}"><equals arg1="${datasource.ojb.platform}" arg2="${mysql.ojb.platform}" /></condition>
		<condition property="real.datasource.driver.class" value="${mysql.driver.class}" else="${oracle.driver.class}"><equals arg1="${datasource.ojb.platform}" arg2="${mysql.ojb.platform}" /></condition>
		<condition property="p6spy.real.driver.class" value="${mysql.driver.class}" else="${oracle.driver.class}"><equals arg1="${datasource.ojb.platform}" arg2="${mysql.ojb.platform}" /></condition>
		<condition property="pool.datasource.class" value="${non.xa.pool.datasource.class}"><not><equals arg1="${connection.pool.impl}" arg2="XAPool" /></not></condition>
		<condition property="pool.datasource.class" value="${mysql.pool.datasource.class}" else="${oracle.pool.datasource.class}"><equals arg1="${datasource.ojb.platform}" arg2="${mysql.ojb.platform}" /></condition>
		<condition property="datasource.ojb.sequence.manager" value="${mysql.ojb.sequence.manager}" else="${oracle.ojb.sequence.manager}"><equals arg1="${datasource.ojb.platform}" arg2="${mysql.ojb.platform}" /></condition>

		<condition property="impex.admin.username" value="${mysql.impex.admin.username}" else="${oracle.impex.admin.username}"><equals arg1="${datasource.ojb.platform}" arg2="${mysql.ojb.platform}" /></condition>
		<condition property="impex.admin.password" value="${mysql.impex.admin.password}" else="${oracle.impex.admin.password}"><equals arg1="${datasource.ojb.platform}" arg2="${mysql.ojb.platform}" /></condition>

		<condition property="rice.server.impex.admin.username" value="${mysql.impex.admin.username}" else="${oracle.impex.admin.username}"><equals arg1="${datasource.ojb.platform}" arg2="${mysql.ojb.platform}" /></condition>
		<condition property="rice.server.impex.admin.password" value="${mysql.impex.admin.password}" else="${oracle.impex.admin.password}"><equals arg1="${datasource.ojb.platform}" arg2="${mysql.ojb.platform}" /></condition>

		<property name="rice.server.datasource.driver.class" value="${datasource.driver.class}" />
		<property name="rice.server.datasource.url" value="${datasource.url}" />
		<condition property="rice.server.datasource.platform" value="${mysql.server.datasource.platform}" else="${oracle.server.datasource.platform}"><equals arg1="${datasource.ojb.platform}" arg2="${mysql.ojb.platform}" /></condition>
		<pathconvert property="drivers.path" dirsep="/" pathsep=";">
			<path location="${drivers.directory}" />
		</pathconvert>
	</target>

	<target name="init-spring-properties" depends="init-property-files">
		<!-- need to build up internal strings for the properties, since we can only set each property once
			   we need to build all the components of the string, setting them to blank if we don't want that piece. -->
		
		<!-- check if the various optional modules are being included -->
		<condition property="internal.contracts.and.grants.spring.files" value="${contracts.and.grants.spring.files}" else="">
			<istrue value="${module.contracts.and.grants.enabled}"/>
		</condition>
        <condition property="internal.kuali.coeus.spring.files" value="${kuali.coeus.spring.files}${institution.coeus.spring.source.file}" else="">
			<istrue value="${module.external.kuali.coeus.enabled}"/>
		</condition>
		<condition property="internal.accounts.receivable.spring.files" value="${accounts.receivable.spring.files}" else="">
			<istrue value="${module.accounts.receivable.enabled}"/>
		</condition>
		<condition property="internal.purchasing.spring.files" value="${purchasing.spring.files}" else="">
			<istrue value="${module.purchasing.enabled}"/>
		</condition>
		<condition property="internal.capital.asset.spring.files" value="${capital.asset.spring.files}" else="">
			<istrue value="${module.capital.asset.enabled}"/>
		</condition>
		<condition property="internal.labor.distribution.spring.files" value="${labor.distribution.spring.files}" else="">
			<istrue value="${module.labor.distribution.enabled}"/>
		</condition>
		<condition property="internal.endowment.spring.files" value="${endowment.spring.files}" else="">
			<istrue value="${module.endowment.enabled}"/>
		</condition>
		<condition property="internal.travel.spring.files" value="${travel.spring.files}" else="">
			<istrue value="${module.travel.enabled}"/>
		</condition>

		<!-- Do the same for the test configurations for the optional modules -->
		<condition property="internal.contracts.and.grants.spring.test.files" value="${contracts.and.grants.spring.test.files}" else="">
			<istrue value="${module.contracts.and.grants.enabled}"/>
		</condition>
		<condition property="internal.accounts.receivable.spring.test.files" value="${accounts.receivable.spring.test.files}" else="">
			<istrue value="${module.accounts.receivable.enabled}"/>
		</condition>
		<condition property="internal.purchasing.spring.test.files" value="${purchasing.spring.test.files}" else="">
			<istrue value="${module.purchasing.enabled}"/>
		</condition>
		<condition property="internal.capital.asset.spring.test.files" value="${capital.asset.spring.test.files}" else="">
			<istrue value="${module.capital.asset.enabled}"/>
		</condition>
		<condition property="internal.labor.distribution.spring.test.files" value="${labor.distribution.spring.test.files}" else="">
			<istrue value="${module.labor.distribution.enabled}"/>
		</condition>
		<condition property="internal.endowment.spring.test.files" value="${endowment.spring.test.files}" else="">
			<istrue value="${module.endowment.enabled}"/>
		</condition>
		<condition property="internal.travel.spring.test.files" value="${travel.spring.test.files}" else="">
			<istrue value="${module.travel.enabled}"/>
		</condition>
		
		<!-- Access security files - these are split into three files, since pieces 
			 affect the KFS Code, the LD optional module, and Rice -->
		<condition property="internal.access.security.core.spring.files" value="${access.security.core.spring.files}" else="">
			<istrue value="${module.access.security.enabled}"/>
		</condition>
		<condition property="internal.access.security.ld.spring.files" value="${access.security.ld.spring.files}" else="">
			<and>
				<istrue value="${module.access.security.enabled}"/>
				<istrue value="${module.labor.distribution.enabled}"/>
			</and>
		</condition>
		<condition property="internal.access.security.purap.spring.files" value="${access.security.purap.spring.files}" else="">
			<and>
				<istrue value="${module.access.security.enabled}"/>
				<istrue value="${module.purchasing.enabled}"/>
			</and>
		</condition>
		<condition property="internal.access.security.krad.override.spring.files" value="${access.security.krad.override.spring.files}" else="">
			<istrue value="${module.access.security.enabled}"/>
		</condition>
		
		<!-- see if we need to include the additional batch server configuration -->
        <condition property="internal.batch.spring.files" value=",${batch.spring.files}" else="">
    		<istrue value="${use.quartz.scheduling}" />
        </condition>
		
		<!-- build the optional module spring files lists, but defer to ones set by the institution -->
		<property name="optional.module.spring.source.files" value="${internal.contracts.and.grants.spring.files}${internal.kuali.coeus.spring.files}${internal.accounts.receivable.spring.files}${internal.purchasing.spring.files}${internal.access.security.purap.spring.files}${internal.capital.asset.spring.files}${internal.labor.distribution.spring.files}${internal.access.security.ld.spring.files}${internal.endowment.spring.files}${internal.travel.spring.files}" />
		<property name="optional.module.spring.test.files" value="${internal.contracts.and.grants.spring.test.files}${internal.accounts.receivable.spring.test.files}${internal.purchasing.spring.test.files}${internal.capital.asset.spring.test.files}${internal.labor.distribution.spring.test.files}${internal.endowment.spring.test.files}${internal.travel.spring.test.files}" />
		
		<!-- set the final properties used by the server (placed into configuration.properties) -->
		<property name="spring.source.files"
				  value="${core.spring.source.files}${internal.batch.spring.files}${internal.access.security.core.spring.files}${integration.spring.files}${optional.module.spring.source.files}${institution.spring.source.files}" />
		<property name="spring.test.files" 
			      value="${core.spring.test.files}${optional.module.spring.test.files}${institution.spring.test.files}" />	
        <property name="krad.override.spring.files" 
        		  value="${kfs.krad.override.spring.files}${internal.access.security.krad.override.spring.files}" />
	</target>
	
	<target name="init-rice-properties" depends="init-property-files">
		<condition property="rice.dev.mode" value="false"><istrue value="${rice.standalone}" /></condition>
		<condition property="rice.dev.mode" value="true" else="false"><isset property="is.local.build" /></condition>
		<!-- <rice module>.mode... 
		    # local - used in development - embedding everything, including web content
		    # embedded - using standalone rice server but running KEW / KIM services locally
			# remote - accessing KIM core services over the KSB - not currently supported by KFS for KEW - KSB is always local  -->
		<condition property="kim.mode" value="EMBEDDED" else="LOCAL"><equals arg1="${rice.standalone}" arg2="true" /></condition>
		<condition property="kew.mode" value="EMBEDDED" else="LOCAL"><equals arg1="${rice.standalone}" arg2="true" /></condition>
		<condition property="coreservice.mode" value="REMOTE" else="LOCAL"><equals arg1="${rice.standalone}" arg2="true" /></condition>
		<condition property="ksb.mode" value="REMOTE" else="LOCAL"><equals arg1="${rice.standalone}" arg2="true" /></condition>
		<condition property="location.mode" value="REMOTE" else="LOCAL"><equals arg1="${rice.standalone}" arg2="true" /></condition>
		<condition property="rice.url" value="${appserver.url}/${rice.application}-${build.environment}" else="${application.url}">
		    <istrue value="${rice.standalone}" />
		</condition>
        <property name="rice.core.url" value="${rice.url}/core"/>
        <property name="rice.kr.url" value="${rice.url}/kr"/>
        <property name="rice.krad.url" value="${rice.url}/kr-krad"/>
        <property name="rice.kim.url" value="${rice.url}/kim"/>
        <property name="rice.kew.url" value="${rice.url}/kew"/>
        <property name="rice.krms.url" value="${rice.url}/krms"/>
        <property name="rice.ken.url" value="${rice.url}/ken"/>
        <property name="rice.externalizable.images.url" value="${application.url}/kr/static/images/"/>
		<property name="rice.ksb.registry.url" value="${rice.url}"/>
		<condition property="rice.ksb.message.persistence" value="false" else="true"><isset property="is.local.build" /></condition>
		<condition property="rice.ksb.use.quartz.database" value="true" else="false">
			<and>
				<istrue value="${use.quartz.scheduling}" />
			    <istrue value="${use.quartz.jdbc.jobstore}" />
			</and>
		</condition>
		<condition property="rice.kew.exception.routing.immediate" value="true" else="false"><isfalse value="${use.quartz.scheduling}" /></condition>

		<if>
			<and>
				<isset property="institution.log4j.properties.file" />
					<not>	        	
						<equals arg1="" arg2="${institution.log4j.properties.file}" trim="true" />
					</not>
			</and>
			<then>
				<loadfile property="institutional.log4j" srcfile="${institution.log4j.properties.file}"><filterchain><expandproperties/></filterchain></loadfile>
			</then>
		</if>
		<!--
		<loadfile property="rice.config" srcfile="${build.appserver.directory}/standalone-rice-config.xml"><filterchain><expandproperties/></filterchain></loadfile>
		-->
	</target>

	<target name="init-b2b-properties" depends="init-property-files">
		<condition property="b2b.environment" value="${b2b.production.environment}" else="${b2b.test.environment}">
			<equals arg1="${build.environment}" arg2="${production.environment.code}" />
		</condition>
		<condition property="b2b.purchase.order.identity" value="${b2b.production.purchase.order.identity}" else="${b2b.test.purchase.order.identity}">
			<equals arg1="${build.environment}" arg2="${production.environment.code}" />
		</condition>
		<condition property="b2b.purchase.order.password" value="${b2b.production.purchase.order.password}" else="${b2b.test.purchase.order.password}">
			<equals arg1="${build.environment}" arg2="${production.environment.code}" />
		</condition>
		<condition property="b2b.shopping.identity" value="${b2b.production.shopping.identity}" else="${b2b.test.shopping.identity}">
			<equals arg1="${build.environment}" arg2="${production.environment.code}" />
		</condition>
		<condition property="b2b.shopping.password" value="${b2b.production.shopping.password}" else="${b2b.test.shopping.password}">
			<equals arg1="${build.environment}" arg2="${production.environment.code}" />
		</condition>
		<condition property="b2b.purchase.order.url" value="${b2b.production.purchase.order.url}" else="${b2b.test.purchase.order.url}">
			<equals arg1="${build.environment}" arg2="${production.environment.code}" />
		</condition>
		<condition property="b2b.punch.back.url" value="${b2b.production.punch.back.url}" else="${b2b.test.punch.back.url}">
			<equals arg1="${build.environment}" arg2="${production.environment.code}" />
		</condition>
		<condition property="b2b.punch.out.url" value="${b2b.production.punch.out.url}" else="${b2b.test.punch.out.url}">
			<equals arg1="${build.environment}" arg2="${production.environment.code}" />
		</condition>
		<condition property="b2b.punch.back.action.forwarding.url" value="${b2b.production.punch.back.action.forwarding.url}" else="${b2b.test.punch.back.action.forwarding.url}">
			<equals arg1="${build.environment}" arg2="${production.environment.code}" />
		</condition>
	</target>

	<target name="init-other-properties" depends="init-property-files">
		<loadfile property="configuration" srcfile="${build.project.directory}/${configuration.file}"><filterchain><expandproperties/></filterchain></loadfile>
	    <if>
	    	<and>
	    		<isset property="institution.configuration.properties.file" />
		        <not>	        	
		            <equals arg1="" arg2="${institution.configuration.properties.file}" trim="true" />
		        </not>
	    	</and>
	        <then>
	            <loadfile property="institutional.configuration" srcfile="${institution.configuration.properties.file}"><filterchain><expandproperties/></filterchain></loadfile>
            </then>
        </if>
		<!-- tokenize and write out the files to the file system -->
		<loadfile property="p6spy" srcfile="${build.project.directory}/${p6spy.file}"><filterchain><expandproperties/></filterchain></loadfile>
		<loadfile property="web" srcfile="${build.project.directory}/${web.file}"><filterchain><expandproperties/></filterchain></loadfile>

		<loadfile property="ojb-prop"    srcfile="${build.project.directory}/${ojb.properties.file}"><filterchain><expandproperties/></filterchain></loadfile>
		<loadfile property="ojb-logging" srcfile="${build.project.directory}/${ojb.logging.file}"><filterchain><expandproperties/></filterchain></loadfile>
		<loadfile property="ojb-repo"    srcfile="${build.project.directory}/${ojb.repository.file}"><filterchain><expandproperties/></filterchain></loadfile>
		
		<loadfile property="context" srcfile="${build.appserver.directory}/${context.file}"><filterchain><expandproperties/></filterchain></loadfile>
		<loadfile property="log4j" srcfile="${user.home.safe}/${log4j.file}" failonerror="false"><filterchain><expandproperties/></filterchain></loadfile>
		<loadfile property="log4j" srcfile="${build.external.directory}/${log4j.file}"><filterchain><expandproperties/></filterchain></loadfile>
		<loadfile property="security" srcfile="${build.external.directory}/${security.file}"><filterchain><expandproperties/></filterchain></loadfile>
	    <if>
	    	<and>
	    		<isset property="institution.security.properties.file" />
		        <not>
		            <equals arg1="" arg2="${institution.security.properties.file}" trim="true" />
		        </not>
	    	</and>
	        <then>
	            <loadfile property="institutional.security" srcfile="${institution.security.properties.file}"><filterchain><expandproperties/></filterchain></loadfile>
            </then>
        </if>
		
	</target>

	<target name="init-test-properties" depends="init-property-files">
		<condition property="test.excludes" value="${tests.excludes}" else="org/kuali/kfs/module/endow/**,${tests.excludes}">
			<istrue value="${module.endowment.enabled}"/>
		</condition>
	</target>

	<target name="init-make-references" depends="init-properties,check-rice-lib,filter-libraries">
		<path id="preliminary.compile.source.classpath">
			<fileset dir="${build.kfs.lib.directory}" includes="*.jar" />
			<fileset dir="${build.rice.lib.directory}" includes="*.jar" />
			<fileset dir="${build.server.lib.directory}" includes="*-api.jar" />
			<fileset dir="${build.appserver.directory}" includes="*.jar" /> <!-- should not be needed but commons logging is here -->
			<fileset dir="${build.directory}" includes="log4j*.jar" />
		</path>
		<if>
			<isset property="institution.lib.directory" />
			<then>
				<path id="compile.source.classpath">
					<path refid="preliminary.compile.source.classpath"/>
					<fileset dir="${institution.lib.directory}" includes="*.jar" />
				</path>
			</then>
			<else>
				<path id="compile.source.classpath">
					<path refid="preliminary.compile.source.classpath"/>
				</path>
			</else>
		</if>
		<path id="database.drivers.classpath">
			<fileset dir="${drivers.directory}" includes="*.jar" />
		</path>
		<path id="run.server.classpath">
			<path refid="compile.source.classpath" />
			<path refid="database.drivers.classpath" />
		</path>
		<path id="compile.tests.classpath">
			<path refid="compile.source.classpath" />
			<fileset dir="${test.lib.directory}" includes="*.jar" />
		</path>
		<!-- the test classes must come first so they can override classes as necessary in
		     the loaded libraries -->
		<path id="run.tests.classpath">
			<pathelement location="${test.classes.directory}" />
			<pathelement location="${drivers.directory}" />
			<path refid="compile.tests.classpath" />
			<path refid="database.drivers.classpath" />
		</path>
	</target>
	
	<target name="make-javadoc" depends="init-make-references">
		<mkdir dir="${doc.directory}"/>
		<javadoc destdir="${doc.directory}" packagenames="org.*" locale="en" useexternalfile="yes" maxmemory="${javadoc.max.memory}">
			<sourcepath><pathelement location="${source.directory}"/></sourcepath>
			<classpath refid="compile.source.classpath"/>
		</javadoc>
	</target>

	<target name="clean-help" depends="init-properties">
		<delete failonerror="false">
			<fileset dir="${basedir.safe}">
				<include name="${help.directory}/**" />
			</fileset>
		</delete>
	</target>

	<target name="clean-rice" unless="dont.filter.project.rice" depends="init-properties">
		<echo message="Cleaning Rice web content from KFS ${webroot.directory}" />
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${basedir.safe}">
				<include name="${webroot.directory}/core/**" />
				<include name="${webroot.directory}/kcb/**" />
				<include name="${webroot.directory}/ken/**" />
				<include name="${webroot.directory}/kew/**" />
				<include name="${webroot.directory}/kim/**" />
				<include name="${webroot.directory}/kr/**" />
				<include name="${webroot.directory}/krad/**" />
				<include name="${webroot.directory}/krms/**" />
				<include name="${webroot.directory}/ksb/**" />
				<include name="${webroot.directory}/rice-portal/**" />
				<include name="${tags.directory}/kew/**" />
				<include name="${tags.directory}/kim/**" />
				<include name="${tags.directory}/kr/**" />
				<include name="${tags.directory}/krad/**" />
				<include name="${tags.directory}/rice-portal/**" />
			</fileset>
		</delete>
	</target>
	
	<target name="clean-project" depends="init-properties,clean-help,clean-rice">
		<delete dir="${build.rice.lib.directory}" />
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${basedir.safe}">
				<include name="${source.directory}/${configuration.file}" />
				<include name="${source.directory}/${p6spy.file}" />
				<include name="${source.directory}/${ojb.properties.file}" />
				<include name="${source.directory}/${ojb.logging.file}" />
				<include name="${source.directory}/${ojb.repository.file}" />
				<include name="${webinf.directory}/${web.file}" />
				<include name="${lib.directory}/*" />
				<include name="${war.directory}/**/**" />
				<include name="${test.directory}/**/**" />
				<include name="*.war" />
				<include name="*.zip" />
				<include name="workflow.xml"/>
				<exclude name="kfs-javadoc.zip" />
			</fileset>
		</delete>
		<delete verbose="true" includeemptydirs="true" failonerror="false">
			<fileset dir="${basedir.safe}/work/workflow">
				<include name="*/completed/**" />
				<include name="*/pending/**" />
				<include name="*/problem/**" />
				<include name="*/completed" />
				<include name="*/pending" />
				<include name="*/problem" />
			</fileset>
		</delete>
	</target>

	<target name="clean-local-work" if="is.local.build" unless="dont.clean.local.work" depends="init-properties">
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${appserver.work.dir}" includes="kfs-*/**" />
		</delete>
	</target>

	<target name="clean-local" if="is.local.build" depends="clean-local-work">
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${base.security.directory}" includes="**/kfs/"/>
			<fileset dir="${base.settings.directory}" includes="**/kfs/"/>
			<fileset dir="${base.logs.directory}" includes="**/kfs/"/>
			<fileset dir="${base.work.directory}" includes="**/kfs/"/>
			<fileset dir="${base.deploy.directory}" includes="**/kfs/"/>
		</delete>
		<delete failonerror="false" verbose="true">
			<fileset dir="${appserver.lib.dir}">
				<or>
					<present targetdir="${build.directory}" />
					<present targetdir="${build.appserver.directory}" />
					<present targetdir="${drivers.directory}" />
				</or>
			</fileset>
		</delete>
		<delete failonerror="false">
			<fileset dir="${appserver.classes.dir}">
				<present targetdir="${build.appserver.directory}" />
			</fileset>
		</delete>
		<!--
	    <delete file="${appserver.deploy.dir}/${rice.application}-${build.environment}.war" failonerror="false" verbose="true" />
	    <delete dir="${appserver.deploy.dir}/${rice.application}-${build.environment}" failonerror="false"/>
	    <delete file="${rice.config.property.file}" failonerror="false" verbose="true" />
	    -->
		<delete failonerror="false">
			<fileset dir="${appserver.localhost.dir}" includes="kfs*.xml" />
		</delete>
	</target>
 
	<target name="filter-project-log4j" unless="use.p6spy.local" depends="init-properties">
		<copy todir="${lib.directory}">
			<fileset dir="${build.directory}" includes="log4j*.jar" />
		</copy>
	</target>

	<target name="filter-project-p6spy" if="use.p6spy.local" depends="filter-project-log4j">
	    <if> <!-- we can only copy this file to the app server IF we are running a local build.  Otherwise, we need to assume that it is
	    already there. -->
	        <isset property="is.local.build" />
	        <then>
        		<copy todir="${appserver.lib.dir}">
        			<fileset dir="${build.directory}" includes="log4j*.jar" />
        		</copy>
            </then>
        </if>
	</target>
	
	<target name="filter-project-help" if="do.filter.project.help" depends="init-properties">
		<unzip dest="${help.directory}" src="${build.project.directory}/help.zip" />
	</target>

	<target name="filter-project-rice" unless="dont.filter.project.rice" depends="init-properties,clean-rice">
		<echo message="Copying Rice Web Content from ${rice.server.war.directory}/${rice.server.war.file.name}" />
		<!--
		<if>
			<isset property="rice.standalone.flag" />
			<then>
				<echo message="Excluding the kew, kim, and ken content since configured to work with a standalone Rice server." />
			</then>
		</if>
		-->
		<unzip dest="${webroot.directory}" src="${rice.server.war.directory}/${rice.server.war.file.name}" >
			<patternset>
				<exclude name="META-INF/**"/>
				<exclude name="WEB-INF/web.xml"/>
				<exclude name="WEB-INF/struts-config.xml"/>
				<exclude name="WEB-INF/classes/**"/>
				<exclude name="WEB-INF/lib/**"/>
				<exclude name="**/rice-portal/css/**"/>
				<exclude name="**/rice-portal/images/**"/>
				<exclude name="**/rice-portal/jsp/**"/>
				<exclude name="**/tags/rice-portal/**"/>
				<exclude name="*"/>
				<!--
				<exclude name="**/kew/**" if="rice.standalone.flag" />
				<exclude name="**/kim/**" if="rice.standalone.flag" />
				<exclude name="**/ken/**" if="rice.standalone.flag" />
				<exclude name="**/kcb/**" if="rice.standalone.flag" />
				-->
			</patternset>
		</unzip>
	</target>
	
	
	<target name="filter-project" depends="filter-project-p6spy,filter-project-help,filter-project-rice,check-rice-lib,filter-libraries">
	
		<echo file="${source.directory}/${configuration.file}" message="${configuration}" />
	    <if>
	        <isset property="institutional.configuration" />
	        <then>
	            <echo append="true" file="${source.directory}/${configuration.file}" message="${institutional.configuration}" />
            </then>
        </if>
		
		<echo file="${source.directory}/${ojb.properties.file}" message="${ojb-prop}" />
		<echo file="${source.directory}/${ojb.logging.file}" message="${ojb-logging}" />
		<echo file="${source.directory}/${ojb.repository.file}" message="${ojb-repo}" />
		<echo file="${source.directory}/${p6spy.file}" message="${p6spy}" />
		<echo file="${webinf.directory}/${web.file}" message="${web}" />
		<mkdir dir="${metainf.directory}" />
		<echo file="${metainf.directory}/${context.file}" message="${context}" />
	</target>

	<target name="check-filter-project-schema" if="dont.filter.project.schema">
		<property name="dont.make.source" value="true"/>
	</target>
	
	<target name="filter-project-schema" unless="dont.filter.project.schema" depends="init-properties,init-make-references,check-filter-project-schema,make-source">
		<path id="run.source.classpath">
			<pathelement location="${classes.directory}" />
			<path refid="compile.source.classpath" />
			<path refid="database.drivers.classpath" />
		</path>
		
		<condition property="rebuild.dd.schema" value='false'><not><isset property="rebuild.dd.schema"/></not></condition>
		
		<java classname="org.kuali.kfs.sys.context.SchemaBuilder" fork="true">
		    <arg value="${build.project.directory}"/>
		    <arg value="${static.directory}"/>
		    <arg value="${use.dd.schema.validation}"/>
		    <arg value="${externalizable.static.content.url}"/>
		    <arg value="${rebuild.dd.schema}"/>
		    <jvmarg value="-Xms${run.tests.min.memory}" />
			<jvmarg value="-Xmx${run.tests.max.memory}" />
			<jvmarg value="-XX:MaxPermSize=${run.tests.max.permsize}" />
		    <classpath refid="run.source.classpath" />
		</java>
	</target>
	
	<target name="rebuild-xsd-from-datadictionary">
		<property name="rebuild.dd.schema" value="true"/>
		<antcall target="filter-project-schema"/>
	</target>
	
	<target name="filter-local" if="is.local.build" depends="init-properties">
		<copy file="${build.appserver.directory}/${carol.file}" todir="${appserver.classes.dir}" overwrite="true" />
		<copy todir="${appserver.lib.dir}" overwrite="true">
			<fileset dir="${build.appserver.directory}" includes="*.jar" />
		</copy>
		<copy todir="${appserver.lib.dir}" overwrite="true">
			<fileset dir="${drivers.directory}" />
		</copy>
		<if>
			<isset property="institution.appserver.directory" />
			<then>
				<copy todir="${appserver.lib.dir}" overwrite="true">
					<fileset dir="${institution.appserver.directory}" />
				</copy>
			</then>
		</if>
		<mkdir dir="${settings.directory}" />
		<echo file="${log4j.settings.file}" message="${log4j}" />
		<if>
			<isset property="institutional.log4j"/>
			<then>
				<echo append="true" file="${log4j.settings.file}" message="${line.separator}${institutional.log4j}"/>
			</then>
		</if>
		<if>
			<isset property="institution.settings.directory" />
			<then>
				<copy todir="${settings.directory}" overwrite="true">
					<fileset dir="${institution.settings.directory}" />
				</copy>
			</then>
		</if>
		<mkdir dir="${security.directory}" />
		<echo file="${security.property.file}" message="${security}"  />
	    <if>
	        <isset property="institutional.security" />
	        <then>
	            <echo append="true" file="${security.property.file}" message="${institutional.security}" />
            </then>
        </if>

		<copy file="${build.external.directory}/${keystore.filename}" tofile="${keystore.file}"/>
		<if>
			<isset property="institution.security.directory" />
			<then>
				<copy todir="${security.directory}" overwrite="true">
					<fileset dir="${institution.security.directory}" />
				</copy>
			</then>
		</if>
		<copy todir="${external.work.directory}">
			<fileset dir="${build.work.directory}" />
			<filterset>
				<filter token="externalizable.static.content.url" value="${externalizable.static.content.url}" />
			</filterset>
		</copy>
		<if>
			<isset property="institution.work.directory" />
			<then>
				<copy todir="${external.work.directory}" overwrite="true">
					<fileset dir="${institution.work.directory}" />
				</copy>
			</then>
		</if>
		<mkdir dir="${logs.directory}" />
	</target>

	<target name="make-source" unless="dont.make.source" depends="make-foundation-source,make-additional-source" />
	
	<target name="make-foundation-source" depends="init-make-references,filter-project" unless="dont.make.source">
		<mkdir dir="${classes.directory}" />
	    <echo message="Compiling Source from ${source.directory} into ${classes.directory}" />
		<javac destdir="${classes.directory}" srcdir="${source.directory}" includeantruntime="false" source="1.6" target="1.6" failonerror="${fail.when.compile.fails}"
			   debug="true" fork="true" memoryinitialsize="${compile.min.memory}" memorymaximumsize="${compile.max.memory}" excludes="${source.compile.excludes}">
			<classpath refid="compile.source.classpath" />			
			<compilerarg line="-Xmaxerrs 500"/>
		</javac>
		<copy todir="${classes.directory}">
			<fileset dir="${source.directory}" includes="${non.java.resources}" />
		</copy>
	</target>
	
	<target name="make-additional-source" if="institution.source.directory" unless="dont.make.source" depends="init-make-references,filter-project">
        <echo message="Compiling Source from ${institution.source.directory} into ${classes.directory}" />
        <javac destdir="${classes.directory}" srcdir="${institution.source.directory}"
               debug="true" fork="true"  source="1.6" target="1.6" failonerror="${fail.when.compile.fails}"
               memoryinitialsize="${compile.min.memory}" memorymaximumsize="${compile.max.memory}" excludes="${source.compile.excludes}">
            <!-- add the just compiled files to the classpath for compiling the customizations -->
            <classpath>
                <pathelement location="${classes.directory}"/>
                <path refid="compile.source.classpath" />
            </classpath>
        </javac>
        <copy todir="${classes.directory}" overwrite="true" verbose="true">
            <fileset dir="${institution.source.directory}" includes="${non.java.resources}" />
        </copy>
	</target>

	<target name="make-tests" depends="make-foundation-tests,make-additional-tests">
		<delete file="${test.directory}/cobertura.ser" quiet="true" />
		<if>
			<isset property="use.cobertura" />
			<then>
		        <cobertura-instrument maxmemory="1g" datafile="${test.directory}/cobertura.ser">
		        	<includeClasses regex=".*org\.kuali\..*" />
		        	<excludeClasses regex=".*org\.kuali\.rice\..*" />
		    		<excludeClasses regex=".*Test.*" />
		    		<excludeClasses regex=".*Suite.*" />
		    		<excludeClasses regex=".*Fixture.*" />
		            <ignore regex="org.apache.log4j.*" />
		        	<ignore regex=".*LOG\..*"/>
		        	<ignore regex=".*System\.out.*"/>
		        	<instrumentationclasspath refid="run.tests.classpath" />
		        </cobertura-instrument>
			</then>
		</if>
	</target>

	<target name="make-foundation-tests" depends="init-make-references,filter-project">
		<mkdir dir="${test.classes.directory}" />
		<echo>*********************************************
Compiling Tests
Source Paths: ${source.directory}
              ${test.infrastructure.source.directory}
              ${test.unit.source.directory}
              ${test.integration.source.directory}
Includes: ${tests.compile.includes}
Excludes: ${tests.compile.excludes}
*********************************************</echo>
		<javac destdir="${test.classes.directory}" 
	 	    source="1.6" target="1.6"
			debug="true" nowarn="true" failonerror="${fail.when.compile.fails}" 
			optimize="true" fork="true" 
			memoryinitialsize="${compile.min.memory}" memorymaximumsize="${compile.max.memory}"
			includes="${tests.compile.includes}"
			excludes="${tests.compile.excludes}">
			<classpath refid="compile.tests.classpath" />
			<src path="${source.directory}" />
			<src path="${test.infrastructure.source.directory}" />
			<src path="${test.unit.source.directory}" />
			<src path="${test.integration.source.directory}" />
			<compilerarg line="-Xmaxerrs 500"/>
		</javac>
		<copy todir="${test.classes.directory}">
			<fileset dir="${test.infrastructure.source.directory}" includes="${tests.non.java.resources}" excludes="${tests.compile.excludes}" />
			<fileset dir="${test.unit.source.directory}" includes="${tests.non.java.resources}" excludes="${tests.compile.excludes}" />
			<fileset dir="${test.integration.source.directory}" includes="${tests.non.java.resources}" excludes="${tests.compile.excludes}" />
			<fileset dir="${source.directory}" includes="${non.java.resources}" excludes="${tests.compile.excludes}" />
		</copy>
	</target>

	<target name="make-additional-tests" depends="init-make-references,filter-project" if="institution.test.source.directory">
        <echo message="Compiling Test Source from ${institution.test.source.directory} into ${test.classes.directory}" />
        <javac destdir="${test.classes.directory}" debug="true" nowarn="true" 
		 	    source="1.6" target="1.6"
        	   optimize="true" fork="true" failonerror="${fail.when.compile.fails}" 
        	   memoryinitialsize="${compile.min.memory}" memorymaximumsize="${compile.max.memory}"
			   includes="${tests.compile.includes}"
			   excludes="${tests.compile.excludes}">
            <src path="${institution.source.directory}" />
            <src path="${institution.test.source.directory}" />
            <classpath>
                <pathelement location="${test.classes.directory}"/>
                <path refid="compile.tests.classpath" />
                <fileset dir="${institution.lib.directory}">
                    <include name="*.jar"/>
                </fileset>
            	<fileset dir="${institution.test.lib.directory}" erroronmissingdir="false">
                    <include name="*.jar" />
                </fileset>
            </classpath>
        </javac>
        <echo message="Copying Non-Java files from ${institution.test.source.directory} into ${test.classes.directory}" />
        <copy todir="${test.classes.directory}" overwrite="true">
            <fileset dir="${institution.test.source.directory}" includes="${non.java.resources}" excludes="${tests.compile.excludes}" />
        </copy>
        <echo message="Copying Non-Java files from ${institution.source.directory} into ${test.classes.directory}" />
        <copy todir="${test.classes.directory}" overwrite="true">
            <fileset dir="${institution.source.directory}" includes="${non.java.resources}" excludes="${tests.compile.excludes}" />
        </copy>
	</target>
	
	<!-- please be careful if you muck with these settings - you can seriously hose the continuous integration process -->
	<target name="test">
		<mkdir dir="${all.temp.directory}" />
		<mkdir dir="${test.xml.results.directory}" />
		<junit showoutput="true" fork="true" forkmode="once" failureproperty="tests.failed" errorproperty="tests.errored" tempdir="${all.temp.directory}" >
	        <sysproperty key="net.sourceforge.cobertura.datafile"
		file="${test.directory}/cobertura.ser" />
			<jvmarg value="-Xms${run.tests.min.memory}" />
			<jvmarg value="-Xmx${run.tests.max.memory}" />
			<jvmarg value="-XX:MaxPermSize=${run.tests.max.permsize}" />
			<classpath refid="run.tests.classpath" />
			<classpath refid="cobertura.classpath" />
			<test name="org.kuali.kfs.sys.context.${tests.startup.class}" todir="${test.xml.results.directory}" />
		</junit>
		<if>
			<isset property="institution.test.source.directory" />
            <then>
				<junit showoutput="true" fork="true" forkmode="once" failureproperty="tests.failed" errorproperty="tests.errored" tempdir="${all.temp.directory}" >
			        <sysproperty key="net.sourceforge.cobertura.datafile"
				file="${test.directory}/cobertura.ser" />
					<jvmarg value="-DKualiTestBase.skipOpenOrInProgressOrReopenedJiraIssues" />
					<jvmarg value="-Dorg.terracotta.quartz.skipUpdateCheck=true" />
					<jvmarg value="-Xms${run.tests.min.memory}" />
					<jvmarg value="-Xmx${run.tests.max.memory}" />
					<jvmarg value="-XX:MaxPermSize=${run.tests.max.permsize}" />
					<classpath refid="run.tests.classpath" />
					<classpath refid="cobertura.classpath" />
					<formatter type="xml" />
					<batchtest todir="${test.xml.results.directory}">
						<!-- use of the single "includes" attribute allows multiple comma-delimited patterns to be provided -->
						<fileset dir="${test.unit.source.directory}" includes="${tests.includes}" excludes="${test.excludes}" />
						<fileset dir="${test.integration.source.directory}" includes="${tests.includes}" excludes="${test.excludes}" />
					</batchtest>
					<!-- run institution tests if possible -->
					<batchtest todir="${test.xml.results.directory}" if="institution.test.source.directory" haltonerror="false">
						<fileset dir="${institution.test.source.directory}" includes="${tests.includes}" excludes="${test.excludes}" />
					</batchtest>
					<test name="org.kuali.kfs.sys.context.${tests.shutdown.class}" todir="${test.xml.results.directory}" />
				</junit>
			</then>
			<else>
				<junit showoutput="true" fork="true" forkmode="once" failureproperty="tests.failed" errorproperty="tests.errored" tempdir="${all.temp.directory}" >
			        <sysproperty key="net.sourceforge.cobertura.datafile"
				file="${test.directory}/cobertura.ser" />
					<jvmarg value="-DKualiTestBase.skipOpenOrInProgressOrReopenedJiraIssues" />
					<jvmarg value="-Dorg.terracotta.quartz.skipUpdateCheck=true" />
					<jvmarg value="-Xms${run.tests.min.memory}" />
					<jvmarg value="-Xmx${run.tests.max.memory}" />
					<jvmarg value="-XX:MaxPermSize=${run.tests.max.permsize}" />
					<classpath refid="run.tests.classpath" />
					<classpath refid="cobertura.classpath" />
					<formatter type="xml" />
					<batchtest todir="${test.xml.results.directory}">
						<!-- use of the single "includes" attribute allows multiple comma-delimited patterns to be provided -->
						<fileset dir="${test.unit.source.directory}" includes="${tests.includes}" excludes="${test.excludes}" />
						<fileset dir="${test.integration.source.directory}" includes="${tests.includes}" excludes="${test.excludes}" />
					</batchtest>
					<test name="org.kuali.kfs.sys.context.${tests.shutdown.class}" todir="${test.xml.results.directory}" />
				</junit>
			</else>
		</if>
		<mkdir dir="${test.html.results.directory}" />
		<junitreport todir="${test.html.results.directory}">
			<fileset dir="${test.xml.results.directory}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${test.html.results.directory}" />
		</junitreport>
		<echo message="Generated test results: ${test.html.results.directory}/index.html" />

		<if>
			<isset property="use.cobertura" />
			<then>
		        <cobertura-report format="xml" maxmemory="1g" datafile="${test.directory}/cobertura.ser" destdir="${test.directory}/cobertura" >
		            <fileset dir="${source.directory}">
		                <include name="**/*.java" />
		            </fileset><!--
		            <fileset dir="${src.dir.main}">
		                <include name="**/*.java" />
		            </fileset>
		            -->
		        </cobertura-report>
			</then>
		</if>
		<delete dir="${all.temp.directory}" failonerror="false" />
	</target>

	<target name="dist-external" depends="init-properties">
		<mkdir dir="${all.temp.directory}/deploy"/>
		<mkdir dir="${all.temp.directory}/deploy/security"/>
		<mkdir dir="${all.temp.directory}/deploy/settings"/>
		<!-- Settings directory -->
		<echo file="${all.temp.directory}/deploy/settings/${log4j.file}" message="${log4j}" />
		<if>
			<isset property="institutional.log4j"/>
			<then>
				<echo append="true" file="${all.temp.directory}/deploy/settings/${log4j.file}" message="${line.separator}${institutional.log4j}"/>
			</then>
		</if>
		<if>
			<isset property="institution.settings.directory" />
			<then>
				<copy todir="${all.temp.directory}/deploy/settings" overwrite="true">
					<fileset dir="${institution.settings.directory}" />
				</copy>
			</then>
		</if>
		
		<!-- Security Directory -->
		<echo file="${all.temp.directory}/deploy/security/${security.file}" message="${security}"  />
	    <if>
	        <isset property="institutional.security" />
	        <then>
	            <echo append="true" file="${all.temp.directory}/deploy/security/${security.file}" message="${institutional.security}" />
            </then>
        </if>

		<copy file="${build.external.directory}/${keystore.filename}" tofile="${all.temp.directory}/deploy/security/${keystore.filename}"/>
		<if>
			<isset property="institution.security.directory" />
			<then>
				<copy todir="${all.temp.directory}/deploy/security" overwrite="true">
					<fileset dir="${institution.security.directory}" />
				</copy>
			</then>
		</if>

		<zip destfile="${basedir.safe}/settings.zip" basedir="${all.temp.directory}/deploy/settings" />
		<zip destfile="${basedir.safe}/security.zip" basedir="${all.temp.directory}/deploy/security" />
		<zip destfile="${basedir.safe}/skel.zip" basedir="${build.work.directory}" />
		<delete dir="${all.temp.directory}/deploy" />
	</target>

	<target name="override-classes-dir" depends="init-properties">
		<var name="classes.directory" value="${war.classes.directory}" />
	</target>
	
	<target name="dist" depends="override-classes-dir,make-source,overlay-additional-web-content,overlay-additional-schema,filter-project-schema" description="Builds the KFS war file for the current build.environment">
		<copy todir="${war.directory}">
			<fileset dir="${webroot.directory}" excludes="WEB-INF/classes/**/**" />
		</copy>
		<jar jarfile="kfs-${build.environment}.war" basedir="${war.directory}" compress="false" />
	</target>

    <target name="overlay-additional-web-content" depends="init-properties" if="institution.web.content.directory">
        <copy todir="${webroot.directory}" preservelastmodified="true" overwrite="true">
            <fileset dir="${institution.web.content.directory}">
                <include name="**/*" />
            </fileset>
        </copy>
    </target>

	<target name="overlay-additional-schema" depends="init-properties" if="institution.schema.directory">
	        <copy todir="${build.project.directory}/xsd" preservelastmodified="true" overwrite="true">
	            <fileset dir="${institution.schema.directory}">
	                <include name="**/*" />
	            </fileset>
	        </copy>
	 </target>

	<target name="continuous-integration" depends="clean-all,make-tests,test">
		<fail if="tests.failed" message="Tests failed" />
	</target>

	<target name="post-load-encrypt" depends="make-source">
		<java classname="org.kuali.kfs.sys.context.BatchStepRunner" fork="true">
			<jvmarg value="-Xms${run.postloadencrypt.min.memory}" />
			<jvmarg value="-Xmx${run.postloadencrypt.max.memory}" />
			<jvmarg value="-XX:MaxPermSize=${run.postloadencrypt.max.permsize}" />
			<jvmarg value="-Dorg.terracotta.quartz.skipUpdateCheck=true" />
			<arg value="postDataLoadEncryptionStep" />
			<classpath>
				<pathelement location="${classes.directory}" />
				<path refid="compile.source.classpath" />
			</classpath>
		</java>
	</target>

    <target name="import-workflow-xml" depends="make-source,filter-local">
        <if>
            <not>
                <isset property="workflow.dir" />
            </not>
            <then>
                <echo>
you must use -Dworkflow.dir=(path)
It must be set to the path of a directory which contains the pending/failed/completed subdirectories used by workflow.  
The workflow files you want to run must exist in the pending subdirectory and will be executed in alphabetical order. 
                </echo>
                <fail />
            </then>
        </if>
    	<echo message="Running Workflow Importer on ${workflow.dir}" />
        <java classname="org.kuali.kfs.sys.context.WorkflowImporter" fork="true">
            <jvmarg value="-Xms512m" />
            <jvmarg value="-Xmx1g" />
            <jvmarg value="-XX:MaxPermSize=256m" />
        	<jvmarg value="-Drice.krad.componentPublishing.enabled=false" />
			<jvmarg value="-Dorg.terracotta.quartz.skipUpdateCheck=true" />
            <arg value="${workflow.dir}" />
            <classpath>
                <pathelement location="${classes.directory}" />
                <path refid="run.server.classpath" />
            	<pathelement location="${drivers.directory}" />
            </classpath>
        </java>
        
    </target>

	<target name="extract-rice-libraries" depends="init-properties">
		<mkdir dir="${build.rice.lib.directory}" />
		<delete verbose="true" failonerror="false">
			<fileset dir="${build.rice.lib.directory}">
			    <include name="*.jar"/>
			</fileset>
		</delete>

		<unzip dest="${build.rice.lib.directory}" src="${rice.server.war.directory}/${rice.server.war.file.name}">
			<patternset includes="WEB-INF/lib/*.jar" excludes="${rice.lib.jars.to.exclude}" />
		    <mapper type="flatten"/>
		</unzip>
	</target>
	
	<target name="build-eclipse-classpath" depends="init-properties" unless="dont.build.eclipse.classpath">
		<!-- this property is here to make it easy to test without replacing the classpath -->
		<property name="classpath.file" value=".classpath"/>
    	<echo append="false" file="${classpath.file}" message="${classpath.prefix}" />

		<!-- Convert paths to unix format for replacement -->
		
		<!-- Rice Jars -->
		<path id="rice.library.jars">
			<fileset dir="${build.rice.lib.directory}"  includes="rice*.jar" excludes="rice*impl*.jar" />
		</path>		  		
		<pathconvert property="rice.library.jars.safe" dirsep="/" pathsep=";">
			<path refid="rice.library.jars" />
		</pathconvert>
		<!-- remove the .jar suffix -->
		<propertyregex property="rice.library.jars.safe.no.suffix"
		               input="${rice.library.jars.safe}"
		               regexp=".jar"
		               replace=""
		               global="true" />
		<for list="${rice.library.jars.safe.no.suffix}" param="jarname" delimiter=";">
			<sequential>
				<propertyregex property="file" 
							 	input="@{jarname}" 
							 	regexp="${basedir.safe}/build/rice-lib/" 
							 	replace="" 
							 	override="true" />
				<echo append="true" file="${classpath.file}"><![CDATA[	<classpathentry exported="true" kind="lib" path="build/rice-lib/${file}.jar" sourcepath="build/rice-sources/${file}-sources.jar" /><!-- rice API lib -->
]]></echo>
			</sequential>
		</for>
		<!-- Rice Impl Jars -->
		<path id="rice.impl.library.jars">
			<fileset dir="${build.rice.lib.directory}"  includes="rice*impl*.jar" />
		</path>		  		
		<pathconvert property="rice.impl.library.jars.safe" dirsep="/" pathsep=";">
			<path refid="rice.impl.library.jars" />
		</pathconvert>
		<!-- remove the .jar suffix -->
		<propertyregex property="rice.impl.library.jars.safe.no.suffix"
		               input="${rice.impl.library.jars.safe}"
		               regexp=".jar"
		               replace=""
		               global="true" />
		<for list="${rice.impl.library.jars.safe.no.suffix}" param="jarname" delimiter=";">
			<sequential>
				<propertyregex property="file" 
							 	input="@{jarname}" 
							 	regexp="${basedir.safe}/build/rice-lib/" 
							 	replace="" 
							 	override="true" />
				<echo append="true" file="${classpath.file}"><![CDATA[	<classpathentry exported="true" kind="lib" path="build/rice-lib/${file}.jar" sourcepath="build/rice-sources/${file}-sources.jar"><!-- rice IMPL lib -->
	<accessrules>
		<accessrule kind="discouraged" pattern="**"/><!-- Should be "forbidden" after Rice 2.0, impl classes should not be referenced by clients -->
	</accessrules>
	</classpathentry>
]]></echo>
			</sequential>
		</for>
		
		<!-- KFS Jars -->
		<path id="kfs.library.jars">
			<fileset dir="${build.kfs.lib.directory}"  includes="*.jar" excludes="${runtime.only.jars}" />
			<fileset dir="${build.rice.lib.directory}"  includes="*.jar"  excludes="${runtime.only.jars},rice*.jar" />
			<fileset dir="${build.server.lib.directory}"  includes="*.jar"  excludes="${runtime.only.jars}" />
			<fileset dir="${build.appserver.directory}"  includes="*.jar"  excludes="${runtime.only.jars}" />
			<fileset dir="${test.lib.directory}"  includes="*.jar"  excludes="${runtime.only.jars}" />
			<fileset dir="${build.directory}"  includes="log4j*.jar" />
		</path>		  		
		<pathconvert property="kfs.library.jars.safe" dirsep="/" pathsep=";">
			<path refid="kfs.library.jars" />
		</pathconvert>
		<for list="${kfs.library.jars.safe}" param="jarname" delimiter=";">
			<sequential>
				<propertyregex property="file" 
							 	input="@{jarname}" 
							 	regexp="${basedir.safe}/" 
							 	replace="" 
							 	override="true" />
				<echo append="true" file="${classpath.file}"><![CDATA[	<classpathentry exported="true" kind="lib" path="${file}" /><!-- KFS lib -->
]]></echo>
			</sequential>
		</for>

		<!-- KFS Runtime Jars -->
		<path id="kfs.runtime.library.jars">
			<fileset dir="${build.kfs.lib.directory}" includes="${runtime.only.jars}" />
			<fileset dir="${build.rice.lib.directory}" includes="${runtime.only.jars}" />
			<fileset dir="${build.server.lib.directory}" includes="${runtime.only.jars}" />
			<fileset dir="${build.appserver.directory}" includes="${runtime.only.jars}" />
			<fileset dir="${test.lib.directory}" includes="${runtime.only.jars}" />
		</path>		  		

		<!-- Convert paths to unix format for replacement -->
		<pathconvert property="kfs.runtime.library.jars.safe" dirsep="/" pathsep=";">
			<path refid="kfs.runtime.library.jars" />
		</pathconvert>

		<for list="${kfs.runtime.library.jars.safe}" param="jarname" delimiter=";">
			<sequential>
				<propertyregex property="file" 
							 	input="@{jarname}" 
							 	regexp="${basedir.safe}/" 
							 	replace="" 
							 	override="true" />
				<echo append="true" file="${classpath.file}"><![CDATA[	<classpathentry exported="true" kind="lib" path="${file}"><!-- Runtime Only lib -->
		<accessrules>
			<accessrule kind="nonaccessible" pattern="**"/>
		</accessrules>
	</classpathentry>
]]></echo>
			</sequential>
		</for>
		
		<!-- KFS Database Jars -->
		<path id="kfs.database.library.jars">
			<fileset dir="${drivers.directory}" includes="${runtime.only.jars}"/>
		</path>		  		

		<!-- Convert paths to unix format for replacement -->
		<pathconvert property="kfs.database.library.jars.safe" dirsep="/" pathsep=";">
			<path refid="kfs.database.library.jars" />
		</pathconvert>

		<for list="${kfs.database.library.jars.safe}" param="jarname" delimiter=";">
			<sequential>
				<propertyregex property="file" 
					input="@{jarname}" 
					regexp="" 
					replace="" 
					override="true" />
				<echo append="true" file="${classpath.file}"><![CDATA[	<classpathentry exported="true" kind="lib" path="${file}"><!-- Runtime Only lib -->
		<accessrules>
			<accessrule kind="nonaccessible" pattern="**"/>
		</accessrules>
	</classpathentry>
]]></echo>
			</sequential>
		</for>
		
		
		<!-- Testing Jars -->

    	<echo append="true" file="${classpath.file}" message="${classpath.suffix}" />
    	<if> 
    		<isset property="eclipse.running" />
    		<then>
    			<eclipse.refreshLocal resource="kfs/" depth="infinite"/>
    		</then>
    	</if>
	</target>

	<target name="refresh-dev-db" depends="set-env-dev,refresh-db" />
	<target name="refresh-dev2-db" depends="set-env-dev2,refresh-db" />

	<target name="refresh-db" depends="refresh-rice-db,refresh-kfs-db" description="Refreshes the KFS and Rice database schema(s) for the current build environment" />
	
	<target name="refresh-rice-db" depends="init-properties" description="Refreshes the Rice component of the database for the current build environment">
		<!-- for Mysql, attempt to remove the schema for the admin URL -->
		<propertyregex property="rice.server.adminUrl" defaultvalue="${rice.server.datasource.url}"
		              input="${rice.server.datasource.url}"
		              regexp="^(.*)/${rice.server.datasource.username}$$"
		              select="\1"
		              casesensitive="true" />
		
		<echo>
Importing Rice tables into the database using the information shown below:

DB Driver = ${real.datasource.driver.class}
DB URL    = ${rice.server.datasource.url}
Username  = ${rice.server.datasource.username}
Password  = $${rice.server.datasource.password} (not shown)

DB Admin URL   = ${rice.server.adminUrl}   (used for creating/recreating schema/user)
Admin Username = ${rice.server.impex.admin.username}
Admin Password = $${rice.server.impex.admin.password} (not shown)
		</echo>
		<mkdir dir="${all.temp.directory}" />
		<property name="impex.properties" location="${all.temp.directory}/impex-build.properties"/>
	    <property name="impex.log.level" value="info" />
		<property name="rice.impex.import.targets" value="drop-schema create-schema import" />

		<!-- build temp impex-build.properties -->
		<echo append="false" file="${impex.properties}">
			torque.project=kfs
			torque.schema.dir=${basedir.safe}/work/db/kfs-db/rice
			torque.sql.dir=${all.temp.directory}/sql
			torque.output.dir=${all.temp.directory}/sql

			import.torque.database=${impex.db.type}
			import.torque.database.driver=${real.datasource.driver.class}
			import.torque.database.url=${rice.server.datasource.url}
			import.torque.database.user=${rice.server.datasource.username}
			import.torque.database.schema=${rice.server.datasource.username}
			import.torque.database.password=${rice.server.datasource.password}
		    import.torque.log=${impex.log.level}

			liquibase.logLevel=${liquibase.logLevel}
			
			post.import.liquibase.project=kfs
			post.import.liquibase.xml.directory=${basedir.safe}/work/db/rice-data
			post.import.liquibase.contexts=bootstrap,demo
			post.import.workflow.project=kfs
			post.import.workflow.xml.directory=${basedir.safe}/work/workflow
			post.import.workflow.ingester.launcher.ant.script=${basedir.safe}/build.xml
			post.import.workflow.ingester.launcher.ant.target=import-workflow-xml
			post.import.workflow.ingester.launcher.ant.xml.directory.property=workflow.dir
			post.import.workflow.ingester.jdbc.url.property=datasource.url
			post.import.workflow.ingester.username.property=datasource.username
			post.import.workflow.ingester.password.property=datasource.password
			post.import.workflow.ingester.additional.command.line=-Ddatasource.ojb.platform=${datasource.ojb.platform} \
			-Dbuild.environment=dev \
			-Dbase.directory=${all.temp.directory} \
			-Dis.local.build= \
			-Ddev.mode= \
			-Drice.dev.mode= \
			-Drice.ksb.batch.mode=true \
			-Ddont.filter.project.rice= \
			-Ddont.filter.project.spring.ide=

			import.admin.url=${rice.server.adminUrl}
			import.admin.user=${rice.server.impex.admin.username}
			import.admin.password=${rice.server.impex.admin.password}
			
			oracle.usermaint.user=${oracle.impex.tool.schema}
			
			drivers.directory=${drivers.path}
		</echo>
		<!-- run import tool for Rice tables/objects -->
		<!-- Due to CloverETL issues with execution directory, we need to run Ant
		     this way to fork the process so that the new JVM starts up within the
		     base directory for the impex project -->
		<java classname="org.apache.tools.ant.Main"
		      fork="true"
		      failonerror="true" dir="${basedir.safe}/work/db/kfs-db/db-impex/impex">		    
		    <classpath path="${java.class.path}" />
		    <jvmarg value="-Xmx1g" />
			<arg value="-Dimpex.properties.file=${impex.properties}" />
			<arg line="${rice.impex.import.targets}"/>
		</java>
	</target>
	
	<target name="refresh-kfs-db" depends="init-properties" description="Refreshes the KFS components of the database for the current build environment">
		<!-- for Mysql, attempt to remove the schema for the admin URL -->
		<propertyregex property="adminUrl" defaultvalue="${datasource.url}"
		              input="${datasource.url}"
		              regexp="^(.*)/${datasource.username}$$"
		              select="\1"
		              casesensitive="true" />
		
		<echo>
Importing KFS tables into the database using the information shown below:

DB Driver = ${real.datasource.driver.class}
DB URL    = ${datasource.url}
Username  = ${datasource.username}
Password  = $${datasource.password} (not shown)

DB Admin URL   = ${adminUrl}   (used for creating/recreating schema/user)
Admin Username = ${impex.admin.username}
Admin Password = $${impex.admin.password} (not shown)
		</echo>
		<mkdir dir="${all.temp.directory}" />
		<property name="impex.properties" location="${all.temp.directory}/impex-build.properties"/>
		<property name="impex.log.level" value="info" />
		<!-- special condition here - we don't want to drop the schema if we are importing both Rice and KFS into the same schema -->
		<if>
			<equals arg1="${datasource.url}${datasource.username}" arg2="${rice.server.datasource.url}${rice.server.datasource.username}"/>
			<then>
				<property name="dont.drop.kfs.schema" value="true"/>
			</then>
		</if>
		<condition property="kfs.impex.import.targets" value="import" else="drop-schema create-schema import"><istrue value="${dont.drop.kfs.schema}"/></condition>

		<!-- build temp impex-build.properties -->
		<echo append="false" file="${impex.properties}">
			torque.project=kfs
			torque.schema.dir=${basedir.safe}/work/db/kfs-db/development
			torque.sql.dir=${all.temp.directory}/sql
			torque.output.dir=${all.temp.directory}/sql

			import.torque.database=${impex.db.type}
			import.torque.database.driver=${real.datasource.driver.class}
			import.torque.database.url=${datasource.url}
			import.torque.database.user=${datasource.username}
			import.torque.database.schema=${datasource.username}
			import.torque.database.password=${datasource.password}
		    import.torque.log=${impex.log.level}
		    
			liquibase.logLevel=${liquibase.logLevel}

			import.admin.url=${adminUrl}
			import.admin.user=${impex.admin.username}
			import.admin.password=${impex.admin.password}
			
			oracle.usermaint.user=${oracle.impex.tool.schema}
			
			drivers.directory=${drivers.path}
		</echo>
		<!-- run import tool for KFS tables/objects -->
		<!-- Due to CloverETL issues with execution directory, we need to run Ant
		     this way to fork the process so that the new JVM starts up within the
		     base directory for the impex project -->
		<java classname="org.apache.tools.ant.Main"
		      fork="true"
		      failonerror="true" dir="${basedir.safe}/work/db/kfs-db/db-impex/impex">		    
		    <classpath path="${java.class.path}" />
		    <jvmarg value="-Xmx1g" />
			<arg value="-Dimpex.properties.file=${impex.properties}" />
			<arg line="${kfs.impex.import.targets}"/>
		</java>			
	</target>


	<target name="run-liquibase-dir" depends="init-properties" description="Runs the directory of liquibase files pointed to by the 'dir.name' property into the main datasource.  Files will be run in alphanumeric order.">
	    <for param="file.name" keepgoing="false" parallel="false">
	        <path>
	          <!-- ensure that the files are run in name order -->
	        	<sort>
	            	<fileset dir="${dir.name}" includes="*.xml"/>
	        		<rcmp:name />
	            </sort>
	        </path>
		    <sequential>
				<liquibase fileName="@{file.name}" />
		    </sequential>
	    </for>
	</target>

	<target name="run-liquibase-file" depends="init-properties" description="Runs the liquibase file pointed to by the 'file.name' property into the main datasource.">
		<liquibase fileName="${file.name}" />
	</target>
	
	
	<macrodef name="liquibase">
    	<attribute name="fileName" />
		<attribute name="command" default="update" />
	    <sequential>
	    	<path id="driver.classpath.for.liquibase" >
				<path refid="database.drivers.classpath" />
		    </path>
		    <!-- need to keep back-slashes out of the path -->
		    <pathconvert refid="driver.classpath.for.liquibase" property="driver.classpath.for.liquibase.string" dirsep="/" />
	        <echo message="Running Liquibase ChangeLog: @{fileName}"/>
		    <java jar="${build.directory}/liquibase-2.0.5.jar" 
				    failonerror="true" 
				    fork="true"
				    dir="${post.import.liquibase.xml.directory}" >
			    <arg value="--driver=${datasource.driver.class}"/>
			    <arg value="--classpath=${driver.classpath.for.liquibase.string}"/>
			    <arg value="--url=${database.url}"/>
				<arg value="--username=${database.username}"/>
				<arg value="--password=${database.password}"/>
			    <!--<arg value="- -defaultSchemaName=${import.torque.database.schema}"/>-->
			    <arg value="--changeLogFile=@{fileName}"/>
			    <arg value="--logLevel=${liquibase.logLevel}" />
			    <!--<arg value="- -contexts=${post.import.liquibase.contexts}"/>-->
			    <arg value="@{command}"/>
		    </java>
	    </sequential>
	</macrodef>
	        		
	
	<target name="clean-tomcat-config" depends="init-properties">
		<echo>Clearing out web configuration files</echo>
		<mkdir dir="${appserver.localhost.dir}" />
		<delete>
			<fileset dir="${appserver.localhost.dir}">
    			<include name="*.xml"/>
			</fileset>
			<fileset dir="${appserver.home}/work">
    			<include name="**/*"/>
			</fileset>
			<fileset dir="${appserver.home}/temp">
    			<include name="**/*"/>
			</fileset>
			<fileset dir="${appserver.home}/logs">
				<include name="**/*"/>
			</fileset>
			<fileset dir="${appserver.deploy.dir}">
				<include name="kr-*/**/*"/>
				<include name="kfs-*/**/*"/>
			</fileset>
		</delete>
	</target>

	<target name="start-tomcat" depends="init-properties">
		<echo>Starting Tomcat Server</echo>
		<property name="tomcat.debug.options" value="" />
		<java classname="org.apache.catalina.startup.Bootstrap" 
				fork="true" 
				dir="${appserver.home}" failonerror="true">
			<classpath>
				<fileset dir="${appserver.home}/bin">
					<include name="*.jar"/>
				</fileset>
			</classpath>
			<jvmarg value="-Xmx2g" />
			<jvmarg value="-Xms512m" />
			<jvmarg value="-XX:PermSize=128m" />
			<jvmarg value="-XX:MaxPermSize=256m" />
			<jvmarg value="-XX:NewSize=128m" />
			<jvmarg value="-XX:MaxNewSize=256m" />
			<jvmarg value="-XX:+UseParNewGC" />
			<jvmarg value="-XX:+UseConcMarkSweepGC" />
			<jvmarg value="-XX:SurvivorRatio=128" />
			<jvmarg value="-XX:MaxTenuringThreshold=0" />
			<jvmarg value="-XX:+UseTLAB" />
			<jvmarg value="-XX:+CMSClassUnloadingEnabled" />
			<jvmarg value="-Dsun.io.serialization.extendedDebugInfo=true" />
			<jvmarg value="-Doracle.net.CONNECT_TIMEOUT=10000" />
			<jvmarg value="-Djava.awt.headless=true" />
			<jvmarg value="-Dorg.apache.jasper.compiler.Parser.STRICT_QUOTE_ESCAPING=false" />
			<jvmarg value="-Dorg.terracotta.quartz.skipUpdateCheck=true" />
			
			<jvmarg value="-DTOMCAT_DIR=${appserver.home}" />
			<jvmarg value="-Dadditional.config.locations=${appserver.config.dir}/rice-config.xml" />
			<jvmarg value="-Dcatalina.base=${appserver.home}" />
			<jvmarg value="-Dcatalina.home=${appserver.home}" />
			<jvmarg value="-Djava.io.tmpdir=${appserver.home}/temp" />
			<jvmarg value="-Djava.util.logging.config.file=${appserver.home}/conf/logging.properties" />
			<jvmarg value="-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager" />
			<jvmarg line="${tomcat.debug.options}" />
			<env key="JAVA_TOOL_OPTIONS" value=""/>
			<arg value="start" />
		</java>
	</target>

	<target name="set-env-dev">
		<property name="build.environment" value="dev" />
	</target>
	<target name="set-env-dev2">
		<property name="build.environment" value="dev2" />
	</target>
	
	<target name="dist-local-if-necessary">
		<!-- run dist local if the configuration.properties file is missing
			 or if the build environment in that file does not match -->
		<loadfile property="configprops.temp" srcfile="${classes.directory}/configuration.properties" failonerror="false">
			<filterchain>
				<linecontainsregexp>
					<regexp pattern="^build\.environment=${build.environment}$" />
				</linecontainsregexp>
			</filterchain>
		</loadfile>
		<echo>${configprops.temp}</echo>
		<if>
			<not>
				<isset property="configprops.temp" />
			</not>
			<then>
				<echo>Running dist-local since environment is different.</echo>
				<antcall target="dist-local" />
			</then>
			<else>
				<echo>Skipping dist-local - found regex: ^build\.environment=${build.environment}$</echo>
			</else>
		</if>
	</target>

	<target name="set-debug-props">
		<property name="tomcat.debug.options" value="-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,suspend=n,server=y"/>
	</target>
	
	<target name="debug-dev" depends="set-debug-props,run-dev" description="Starts up the included Tomcat server with KFS using Rice in bundled mode." />
	<target name="debug-dev2" depends="set-debug-props,run-dev2" description="Starts up the included Tomcat server with KFS using Rice in embedded (Rice standalone) mode." />
	
	<target name="run-dev" depends="set-env-dev,init-properties,dist-local-if-necessary,make-source,clean-tomcat-config" description="Starts up the included Tomcat server with KFS using Rice in bundled mode.">
		<!--
		<echo>Copying tokenized files to WEB-INF/classes</echo>
		<copy todir="${classes.directory}" preservelastmodified="true" verbose="true">
			<fileset dir="${source.directory}" includes="${non.java.resources}" />
		</copy>
		-->
		<echo>Moving KFS descriptor into path</echo>
		<echo file="${appserver.home}/conf/Catalina/localhost/kfs-dev.xml"><![CDATA[
			<Context path="/kfs-dev" reloadable="false" docBase="${basedir.safe}/work/web-root" allowLinking="true">
			</Context>
		]]></echo>
		<antcall target="start-tomcat" />
	</target>

	<target name="run-dev2" depends="set-env-dev2,init-properties,dist-local-if-necessary,make-source,clean-tomcat-config" description="Starts up the included Tomcat server with KFS using Rice in embedded (Rice standalone) mode.">
		<echo>Moving Rice descriptor into path</echo>
		<echo file="${appserver.home}/conf/Catalina/localhost/kr-dev2.xml"><![CDATA[
			<Context path="/kr-dev2" reloadable="false" docBase="${basedir.safe}/build/external/appserver/rice-web-${kfs.rice.version}.war" unpackWAR="false" allowLinking="true">
			</Context>
		]]></echo>
		<parallel>
			<sequential>
				<antcall target="start-tomcat" />
			</sequential>
			<sequential>
				<sleep seconds="10" />
				<echo>Moving KFS descriptor into path</echo>
				<echo file="${appserver.home}/conf/Catalina/localhost/kfs-dev2.xml"><![CDATA[
					<Context path="/kfs-dev2" reloadable="false" docBase="${basedir.safe}/work/web-root">
					</Context>
				]]></echo>
			</sequential>
		</parallel>
	</target>
	
	<target name="help" depends="init-properties" description="Describe public targets">
		<echo>--- OVERVIEW ---

	the following configuration files are involved in the build process
			
			- ${basedir.safe}/build.xml
			- ${user.home.safe}/kfs-build.properties
			- ${institution.build.properties.file}
			- ${basedir.safe}/${build.environment}-build.properties
			- ${basedir.safe}/build/properties/*

	you should start using this build script as follows

			1. copy the sample kfs-build.properties from
					${basedir.safe}/${build.user.directory} 
				to
					${user.home.safe}
			    - If desired, add your email address to the notification addresses.			
			    - The default database setup which will be used is in ${basedir.safe}/build/properties/database.properties
		          and some are overridden by ${basedir.safe}/dev-build.properties.
				-- You can copy any properties from there (or any other property file) to your kfs-build.properties
				   file to override the defaults in the project.
			    - save your changes

			2. Copy your JDBC driver(s) into the ${basedir.safe}/build/drivers directory 
				or set the drivers.directory property to a directory where you have your drivers.
			
			3. Run the refresh-db Ant target
				This will use the information in your configuration files to
				log into the database and install the tables.
				- The default impex database setup which will be used is in ${basedir.safe}/build/properties/database.properties,
					in particular the *impex* properties.
				-- You can copy any properties from there to your kfs-build.properties file to override 
					the defaults in the project.
			
			4. Run the dist-local Ant target
				This reads the above configuration files and builds the "final"
				configuration files used by the application.  Some files are
				placed into work/src and others are placed into ${external.config.directory}

			5. Run the run-dev Ant target

			6. Wait.  The process will take from 1-3 minutes depending on your system's speed.
			
			7. Launch a browser and access ${application.url}

	You can override the default log4j settings for your local deployments by copying
		${basedir.safe}/${build.external.directory}/${log4j.file} to
			${user.home.safe} and modifying as desired.  you will also need to run the dist-local target
			for this change to take effect.

			--- MAIN TARGETS ---

			dist-local: prepares tokenized resources and local configuration files and deploys tomcat context file on development workstation
			- this target should be run each time you update the project from version control 
			    or change property values in ${user.home.safe}/kfs-build.properties
			- tomcat should not be running when you execute this target
			- You must refresh the project in Eclipse after running this target before starting up the server.

			test-local: runs all project JUnit tests and generates results
            - criteria for running dist-local must be met before running this target
			- you can customize the set of tests that run by modifying the value of tests.includes in ${user.home.safe}/kfs-build.properties
			- tomcat should not be running when you execute this target
			- This assumes you have the default demo dataset loaded.  Most tests will fail if the database is not populated as expected.

			echo-properties: executes ant echoproperties task, thereby printing out all the properties that have been set.  
				There are quite a number of property files loaded by KFS.

			clean: removes all build output
		</echo>
	</target>

	<import file="build-foundation.xml"/>
</project>
